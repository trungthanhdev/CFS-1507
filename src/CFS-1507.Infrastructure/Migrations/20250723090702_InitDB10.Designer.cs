// <auto-generated />
using System;
using CFS_1507.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CFS_1507.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250723090702_InitDB10")]
    partial class InitDB10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CFS_1507.Domain.Entities.AttachToEntity", b =>
                {
                    b.Property<string>("attach_to_id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("role_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("attach_to_id");

                    b.HasIndex("role_id");

                    b.HasIndex("user_id");

                    b.ToTable("AttachToEntities");

                    b.HasData(
                        new
                        {
                            attach_to_id = "6e4f964b-8c79-4c7f-8db7-5c9df6b3a131",
                            created_at = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            role_id = "a47a25b5-6ef4-47b4-b942-52c2525a9a56",
                            updated_at = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            user_id = "62b7cf0b-53c4-4e6d-b7e3-9c4fddb8f7da"
                        },
                        new
                        {
                            attach_to_id = "09fc9342-3bc3-4a01-81d9-2c38e6b6f5c4",
                            created_at = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            role_id = "f8e7280b-37c3-41d1-9a2d-6a1f40b25cd3",
                            updated_at = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            user_id = "8dbdf2f7-139b-4037-9f75-4f489313cb12"
                        });
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.BlackListEntity", b =>
                {
                    b.Property<string>("blacklist_id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("token_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("blacklist_id");

                    b.HasIndex("user_id");

                    b.ToTable("BlackListEntities");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.CartEntity", b =>
                {
                    b.Property<string>("cart_id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("is_Paid")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("cart_id");

                    b.HasIndex("user_id");

                    b.ToTable("CartEntities");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.CartItemsEntity", b =>
                {
                    b.Property<string>("cart_item_id")
                        .HasColumnType("text");

                    b.Property<string>("cart_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("product_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("product_price")
                        .HasColumnType("double precision");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("cart_item_id");

                    b.HasIndex("cart_id");

                    b.HasIndex("product_id");

                    b.ToTable("CartItemsEntities");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.LanguageEntity", b =>
                {
                    b.Property<string>("language_id")
                        .HasColumnType("text");

                    b.Property<string>("language_code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("language_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("language_id");

                    b.ToTable("LanguageEntities");

                    b.HasData(
                        new
                        {
                            language_id = "0196cce9-cadf-704d-bdcf-9edec1fc115d",
                            language_code = "vi-VN",
                            language_name = "Tiếng Việt"
                        },
                        new
                        {
                            language_id = "0196cce9-cadf-7881-894d-b4a5ac0889ff",
                            language_code = "en-US",
                            language_name = "English"
                        });
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.OrderEntity", b =>
                {
                    b.Property<string>("order_id")
                        .HasColumnType("text");

                    b.Property<string>("cart_id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("order_id");

                    b.HasIndex("cart_id")
                        .IsUnique();

                    b.ToTable("OrderEntities");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.OrderItemsEntity", b =>
                {
                    b.Property<string>("order_item_id")
                        .HasColumnType("text");

                    b.Property<string>("order_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("product_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("order_item_id");

                    b.HasIndex("order_id");

                    b.ToTable("OrderItemsEntities");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<string>("product_id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("is_bought")
                        .HasColumnType("integer");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("is_in_cart")
                        .HasColumnType("integer");

                    b.Property<int>("is_in_stock")
                        .HasColumnType("integer");

                    b.Property<string>("product_description")
                        .HasColumnType("text");

                    b.Property<string>("product_image")
                        .HasColumnType("text");

                    b.Property<string>("product_name")
                        .HasColumnType("text");

                    b.Property<double?>("product_price")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("product_id");

                    b.ToTable("ProductEntities");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<string>("role_id")
                        .HasColumnType("text");

                    b.Property<string>("role_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("role_id");

                    b.ToTable("RoleEntities");

                    b.HasData(
                        new
                        {
                            role_id = "a47a25b5-6ef4-47b4-b942-52c2525a9a56",
                            role_name = "ADMIN"
                        },
                        new
                        {
                            role_id = "f8e7280b-37c3-41d1-9a2d-6a1f40b25cd3",
                            role_name = "USER"
                        });
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.TranslateEntity", b =>
                {
                    b.Property<string>("translate_id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("product_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("translate_description")
                        .HasColumnType("text");

                    b.Property<string>("translate_image")
                        .HasColumnType("text");

                    b.Property<string>("translate_name")
                        .HasColumnType("text");

                    b.Property<double?>("translate_price")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("translate_id");

                    b.HasIndex("product_id");

                    b.ToTable("TranslateEntities");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.UserEntity", b =>
                {
                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("hashPassWord")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("user_id");

                    b.ToTable("UserEntities");

                    b.HasData(
                        new
                        {
                            user_id = "62b7cf0b-53c4-4e6d-b7e3-9c4fddb8f7da",
                            created_at = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            email = "admin@example.com",
                            hashPassWord = "$2a$11$KNZLsWhag2eHt2FvvO/Zp.BfDDarMVYA8xMRlJmCt9iHREew38wme",
                            updated_at = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            userName = "root"
                        },
                        new
                        {
                            user_id = "8dbdf2f7-139b-4037-9f75-4f489313cb12",
                            created_at = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            email = "user1@example.com",
                            hashPassWord = "$2a$11$KNZLsWhag2eHt2FvvO/Zp.BfDDarMVYA8xMRlJmCt9iHREew38wme",
                            updated_at = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            userName = "dev"
                        });
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.AttachToEntity", b =>
                {
                    b.HasOne("CFS_1507.Domain.Entities.RoleEntity", "Role")
                        .WithMany("AttachTos")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFS_1507.Domain.Entities.UserEntity", "User")
                        .WithMany("AttachToEntities")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.BlackListEntity", b =>
                {
                    b.HasOne("CFS_1507.Domain.Entities.UserEntity", "User")
                        .WithMany("BlackListEntities")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.CartEntity", b =>
                {
                    b.HasOne("CFS_1507.Domain.Entities.UserEntity", "User")
                        .WithMany("CartEntities")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.CartItemsEntity", b =>
                {
                    b.HasOne("CFS_1507.Domain.Entities.CartEntity", "Cart")
                        .WithMany("CartItemsEntities")
                        .HasForeignKey("cart_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFS_1507.Domain.Entities.ProductEntity", "Product")
                        .WithMany("CartItemsEntities")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.OrderEntity", b =>
                {
                    b.HasOne("CFS_1507.Domain.Entities.CartEntity", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("CFS_1507.Domain.Entities.OrderEntity", "cart_id");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.OrderItemsEntity", b =>
                {
                    b.HasOne("CFS_1507.Domain.Entities.OrderEntity", "Order")
                        .WithMany("OrderItemsEntities")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.TranslateEntity", b =>
                {
                    b.HasOne("CFS_1507.Domain.Entities.ProductEntity", "Product")
                        .WithMany("TranslateEntities")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.CartEntity", b =>
                {
                    b.Navigation("CartItemsEntities");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.OrderEntity", b =>
                {
                    b.Navigation("OrderItemsEntities");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.ProductEntity", b =>
                {
                    b.Navigation("CartItemsEntities");

                    b.Navigation("TranslateEntities");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.RoleEntity", b =>
                {
                    b.Navigation("AttachTos");
                });

            modelBuilder.Entity("CFS_1507.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("AttachToEntities");

                    b.Navigation("BlackListEntities");

                    b.Navigation("CartEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
